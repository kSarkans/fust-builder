#!/usr/bin/env python

import os
import sys
import configparser

# Styles
S0 = '\033[0m'
SBLD = '\033[1m'
SITL = '\033[3m'

# Colors
CRED = '\033[31m'
CGRN = '\033[32m'
CBLU = '\033[34m'
CPRP = '\033[35m'
CCYN = '\033[36m'
CYLW = '\033[33m'

# Variables
limArg = 4
global path
global exe_name
global path_src
global path_lib
global path_build

def rtn(code, msg):
    MSG_SUC = CYLW+SBLD+'Fust'+S0+' ['+CGRN+'0'+S0+']: '
    MSG_ERR = CYLW+SBLD+'Fust'+S0+' ['+CRED+'1'+S0+']: '
    
    if code == 0:
        print(MSG_SUC + msg)
    else:
        print(MSG_ERR + msg)

def help():
    print(CYLW+SBLD+'Fust Builder manual\n'+S0)

    print('fust '+CCYN+'[ARGUMENT_1] '+CPRP+'[ARGUMENT_2] '+CBLU+SITL+'[OPTIONS]'+S0+':')

    print(CCYN+'\t[ARGUMENT_1]'+S0+':')
    print('\t\t'+CYLW+'help'+S0+'\t  ---   Display this manual.')
    print('\t\t'+CYLW+'mkconfig'+S0+'  ---   Create a project config file. '+CRED+SBLD+'Will override existing file!'+S0)
    print('\t\t'+CYLW+'debug'+S0+'\t  ---   Perform debugging. Creates an executable file in the project folder at \'project-path/build/\' and runs it immediately.')
    print('\t\t'+CYLW+'pdebug'+S0+'\t  ---   Pure debugging. Does the same as \'debug\', but leaves no executable files behind.')
    print('\t\t'+CYLW+'build'+S0+'\t  ---   Builds the project into an executable file at \'project-path/build/\'.')

    print(CPRP+'\t[ARGUMENT_2]'+S0+':')
    print('\t\t'+CYLW+'gcc'+S0+'\t  ---   Use gcc as compiler.')
    print('\t\t'+CYLW+'g++'+S0+'\t  ---   Use g++ as compiler.')
    print('\t\t'+CYLW+SITL+'path'+S0+'\t  ---   The path '+SBLD+'(eg /home/user/project)'+S0+' is specified to \'mkconfig\' in the first argument if you want to specify a different path for the config file than the one you are currently in. ')

    print(CBLU+SITL+'\t[OPTIONS]'+S0+':')
    print('\t\t'+CYLW+SITL+'compiler options'+S0+'   ---   Additional compiler options, such as -lm, to include the \'math.h\' library. '+SBLD+'To enter multiple options, use quotes like \'-lm -Wall\' or "-lm -Wall".'+S0)

def loadconfig():
    config = configparser.ConfigParser()

    # Try to get config. If failed then load default values
    try:
        config.read('fust.config')

        try:
            path = config.get('Project', 'path')
        except:
            path = os.getcwd()

        try:
            exe_name = config.get('Project', 'exe')
        except:
            exe_name = 'a.out'

        try:
            path_src = config.get('Project', 'src')
        except:
            path_src = 'src'

        try:
            path_lib = config.get('Project', 'lib')
        except:
            path_lib = 'lib'

        try:
            path_build = config.get('Project', 'build')
        except:
            path_build = 'build'
    except:
        path = os.getcwd()
        exe_name = 'a.out'
        path_src = 'src'
        path_lib = 'lib'
        path_build = 'build'

def mkconfig(conf_path):
    try:
        _f = open(conf_path + '/fust.config', 'w')
        _f.write('[Project]\n;path = /home/user/project\nexe = a.out\nsrc = src\nlib = lib')
        _f.close()
        rtn(0, 'Config created at \''+conf_path+'/fust.config\'')
    except PermissionError:
        rtn(1, 'Permission denied: \''+conf_path+'/fust.config\'.')
    except:
        rtn(1, 'Unexcepted error.')

def main():
    loadconfig()

    if len(sys.argv) > 1 and len(sys.argv) < limArg:
        if sys.argv[1] == 'help':
            help()
        elif sys.argv[1] == 'mkconfig':
            if len(sys.argv) > 2 and sys.argv[2] != None:
                try:
                    mkconfig(str(sys.argv[2]))
                except FileNotFoundError:
                    rtn(1, 'No such directory \''+str(sys.argv[2])+'\'')
                except:
                    rtn(1, 'Unexcepted error.')
            else:
                mkconfig(os.getcwd())
        else:
            rtn(1, 'Invalid argument \''+sys.argv[1]+'\'. Type \'fust help\' to display manual.')
    elif len(sys.argv) < 2:
        rtn(1, 'No argument. Type \'fust help\' to display manual.')
    elif len(sys.argv) >= limArg:
        rtn(1, 'Too many arguments ('+str(len(sys.argv))+'). Type \'fust help\' to display manual.')

if __name__ == '__main__':
    main()